//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""f92e9154-c897-49c4-84f7-5257b596409e"",
            ""actions"": [
                {
                    ""name"": ""Move Left Arm"",
                    ""type"": ""Value"",
                    ""id"": ""4fa47a33-6627-4938-995a-2d7fd480a21c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move Right Arm"",
                    ""type"": ""Value"",
                    ""id"": ""fcc1f5aa-2cb1-4595-91a3-4054e4fd6c3d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grab Right"",
                    ""type"": ""Button"",
                    ""id"": ""9f78e506-c37e-4e11-b9e2-d972713f3cae"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grab Left"",
                    ""type"": ""Button"",
                    ""id"": ""9c0d1f1e-534e-4da7-8f89-5d6332d24ad5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftArmVertical"",
                    ""type"": ""Button"",
                    ""id"": ""0c7f04ac-0974-4565-9386-e23512ed1fb6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightArmVertical"",
                    ""type"": ""Button"",
                    ""id"": ""6846a23d-a614-4139-8580-8b1b786824c1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f9f57891-5d7d-4734-a72e-8e726981d490"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Left Arm"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""591af606-3eec-4fc9-a923-0389bdedbc49"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Left Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""10aacd9c-5554-46ad-a442-510997c549f5"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Left Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""db4cb95b-dfd0-40b3-8294-1919417db3e5"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Left Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""317a34f3-836e-4ced-b65e-b922a0a584e6"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Left Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""3dc2c49f-152a-4535-87f3-983a9a83b4e0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Left Arm"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8742742e-2806-4c11-a81f-3acecae649d5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Left Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""11f6c32e-8de1-4c95-abcd-ce7e0ac5c2bd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Left Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a223e8d7-246d-49ed-8c23-dd6da7b911d3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Left Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0e0ad03c-a522-4b32-bb33-21add3b68418"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Left Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d5e982d6-709e-4e46-802c-67a608a5c69e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Right Arm"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6306f91d-978f-438b-82f7-6b4774afa08b"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Right Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""342e7f5a-f40a-4e4f-9305-c4a6255ca572"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Right Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7bc9fed8-5be7-4188-90d9-718678383f37"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Right Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e5e950bf-2d49-40ac-8212-58c61a630c9e"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Right Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7b9c45c2-cfbe-474b-8ccc-f49d3491c03b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Right Arm"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""09d6b7f9-9664-40dc-81b0-ce15fb6aea7d"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Right Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7cafa02a-1564-461e-8679-fb5d37bd493b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Right Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5a98f5e5-960a-4357-865b-d06230476ca0"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Right Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d7ba6055-4454-4b3f-a182-1a1c8c971d0a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Right Arm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1e863151-a959-4744-a900-9e01e5cccfe1"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c0f7ba9-e64f-4563-9fcf-0c11e19a184d"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2db788fe-9814-4d30-a0a7-8efc0c7b3968"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftArmVertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fceb498a-5bf2-42ef-a350-4498800ebb12"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightArmVertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ArmControls"",
            ""id"": ""8cba6c6e-871f-4cc4-9e46-ec593a9a1902"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_MoveLeftArm = m_Gameplay.FindAction("Move Left Arm", throwIfNotFound: true);
        m_Gameplay_MoveRightArm = m_Gameplay.FindAction("Move Right Arm", throwIfNotFound: true);
        m_Gameplay_GrabRight = m_Gameplay.FindAction("Grab Right", throwIfNotFound: true);
        m_Gameplay_GrabLeft = m_Gameplay.FindAction("Grab Left", throwIfNotFound: true);
        m_Gameplay_LeftArmVertical = m_Gameplay.FindAction("LeftArmVertical", throwIfNotFound: true);
        m_Gameplay_RightArmVertical = m_Gameplay.FindAction("RightArmVertical", throwIfNotFound: true);
        // ArmControls
        m_ArmControls = asset.FindActionMap("ArmControls", throwIfNotFound: true);
    }

    ~@PlayerControls()
    {
        UnityEngine.Debug.Assert(!m_Gameplay.enabled, "This will cause a leak and performance issues, PlayerControls.Gameplay.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_ArmControls.enabled, "This will cause a leak and performance issues, PlayerControls.ArmControls.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_MoveLeftArm;
    private readonly InputAction m_Gameplay_MoveRightArm;
    private readonly InputAction m_Gameplay_GrabRight;
    private readonly InputAction m_Gameplay_GrabLeft;
    private readonly InputAction m_Gameplay_LeftArmVertical;
    private readonly InputAction m_Gameplay_RightArmVertical;
    public struct GameplayActions
    {
        private @PlayerControls m_Wrapper;
        public GameplayActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveLeftArm => m_Wrapper.m_Gameplay_MoveLeftArm;
        public InputAction @MoveRightArm => m_Wrapper.m_Gameplay_MoveRightArm;
        public InputAction @GrabRight => m_Wrapper.m_Gameplay_GrabRight;
        public InputAction @GrabLeft => m_Wrapper.m_Gameplay_GrabLeft;
        public InputAction @LeftArmVertical => m_Wrapper.m_Gameplay_LeftArmVertical;
        public InputAction @RightArmVertical => m_Wrapper.m_Gameplay_RightArmVertical;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @MoveLeftArm.started += instance.OnMoveLeftArm;
            @MoveLeftArm.performed += instance.OnMoveLeftArm;
            @MoveLeftArm.canceled += instance.OnMoveLeftArm;
            @MoveRightArm.started += instance.OnMoveRightArm;
            @MoveRightArm.performed += instance.OnMoveRightArm;
            @MoveRightArm.canceled += instance.OnMoveRightArm;
            @GrabRight.started += instance.OnGrabRight;
            @GrabRight.performed += instance.OnGrabRight;
            @GrabRight.canceled += instance.OnGrabRight;
            @GrabLeft.started += instance.OnGrabLeft;
            @GrabLeft.performed += instance.OnGrabLeft;
            @GrabLeft.canceled += instance.OnGrabLeft;
            @LeftArmVertical.started += instance.OnLeftArmVertical;
            @LeftArmVertical.performed += instance.OnLeftArmVertical;
            @LeftArmVertical.canceled += instance.OnLeftArmVertical;
            @RightArmVertical.started += instance.OnRightArmVertical;
            @RightArmVertical.performed += instance.OnRightArmVertical;
            @RightArmVertical.canceled += instance.OnRightArmVertical;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @MoveLeftArm.started -= instance.OnMoveLeftArm;
            @MoveLeftArm.performed -= instance.OnMoveLeftArm;
            @MoveLeftArm.canceled -= instance.OnMoveLeftArm;
            @MoveRightArm.started -= instance.OnMoveRightArm;
            @MoveRightArm.performed -= instance.OnMoveRightArm;
            @MoveRightArm.canceled -= instance.OnMoveRightArm;
            @GrabRight.started -= instance.OnGrabRight;
            @GrabRight.performed -= instance.OnGrabRight;
            @GrabRight.canceled -= instance.OnGrabRight;
            @GrabLeft.started -= instance.OnGrabLeft;
            @GrabLeft.performed -= instance.OnGrabLeft;
            @GrabLeft.canceled -= instance.OnGrabLeft;
            @LeftArmVertical.started -= instance.OnLeftArmVertical;
            @LeftArmVertical.performed -= instance.OnLeftArmVertical;
            @LeftArmVertical.canceled -= instance.OnLeftArmVertical;
            @RightArmVertical.started -= instance.OnRightArmVertical;
            @RightArmVertical.performed -= instance.OnRightArmVertical;
            @RightArmVertical.canceled -= instance.OnRightArmVertical;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // ArmControls
    private readonly InputActionMap m_ArmControls;
    private List<IArmControlsActions> m_ArmControlsActionsCallbackInterfaces = new List<IArmControlsActions>();
    public struct ArmControlsActions
    {
        private @PlayerControls m_Wrapper;
        public ArmControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_ArmControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ArmControlsActions set) { return set.Get(); }
        public void AddCallbacks(IArmControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_ArmControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ArmControlsActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(IArmControlsActions instance)
        {
        }

        public void RemoveCallbacks(IArmControlsActions instance)
        {
            if (m_Wrapper.m_ArmControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IArmControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_ArmControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ArmControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ArmControlsActions @ArmControls => new ArmControlsActions(this);
    public interface IGameplayActions
    {
        void OnMoveLeftArm(InputAction.CallbackContext context);
        void OnMoveRightArm(InputAction.CallbackContext context);
        void OnGrabRight(InputAction.CallbackContext context);
        void OnGrabLeft(InputAction.CallbackContext context);
        void OnLeftArmVertical(InputAction.CallbackContext context);
        void OnRightArmVertical(InputAction.CallbackContext context);
    }
    public interface IArmControlsActions
    {
    }
}
